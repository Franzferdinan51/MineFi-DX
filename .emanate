"use strict";


const E = new Emanator(__dirname, {
    type : 'NWJS+SDK',
    guid : 'c1072045-6d98-44d8-9aa5-e9be6c79bd01',
    group : 'Kaspa',
    ident : 'kdx',
    title : 'KDX',
    banner : 'KDX',
    git : 'git@github.com:aspectron/kdx',
    author : "ASPECTRON Inc.",
    url : "http://aspectron.com",
    archive : true,
    folder : true,
    standalone : true,
    production: true,
    DMG: true,
    nwjs : { version : '0.45.4' },
    resources : 'resources/setup'
})

const go = await E.tools.go('go1.13.4');
const git = await E.tools.git();
const gcc = await E.tools.gcc();


// E.BIN = path.join(E.appFolder,'bin',E.PLATFORM_ARCH);
// mkdirp.sync(E.BIN);

//mkdirp.sync(path.join(E.appFolder,'setup'));

E.task('kaspad', ['origin'], async (callback) => {

    //return true;
    if(E.PLATFORM == 'windows') {
        process.env.PATH = ['C:\\TDM-GCC-64\\bin', ...process.env.PATH.split(';')].join(';');
    }

    let dest = path.join(go.SRC,'github.com/kaspanet/');
    if(E.flags.reset && fs.existsSync(dest))
        E.emptyDir(dest);

    const branch = E.flags['branch'] || 'master';

    const repos = { };
    repos.kaspa = ['kaspad','kasparov'];

    for(const repo of repos.kaspa) {
        
        console.log(`git clone git@github.com:kaspanet/${repo}`);
        await git.clone(`git@github.com:kaspanet/${repo}`,dest, {branch});
    }
    
    if(E.flags['with-extras']) {
        repos.extras = ['miningsimulator', 'txgen'];
        for(const repo of repos.extras) {
            console.log(`git clone git@github.com:kaspanet/${repo}`);
            await git.clone(`git@github.com:kaspanet/${repo}`,dest);
        }
    }
        

    // ---

    let targets = [
        'kaspad',
        'kasparov/kasparovd',
        'kasparov/kasparovsyncd',
        'kasparov/examples/wallet',
    ];

    if(E.flags['with-extras']) {
        targets = [
            ...targets,
            'miningsimulator',
            'txgen',
            ...fs.readdirSync(path.join(dest,'kaspad/cmd')).map(f => `kaspad/cmd/${f}`)
        ];
    }


    let rename = {
    }
    
    //let jobs = []
    let folders = []

    for(let target of targets) {
        let folder = path.join(dest,target);
        await go.build(folder);
        folders.push(folder);
        //jobs.push(go.build(folder));
    }

    //await Promise.all(jobs);

    folders.forEach((folder) => {
        let file = path.basename(folder);
        let name = `${E.title} ${file}`;
        let dest = rename[file] || file;
        file += E.PLATFORM_BINARY_EXTENSION;
        dest += E.PLATFORM_BINARY_EXTENSION;

        if(!fs.existsSync(path.join(folder,file))) {
            console.log(`Unable to locate source file: ${path.join(folder,file)}`);
            console.log(`...giving up`);
            prcess.exit(1);
        }

        E.copy(path.join(folder,file),path.join(E.BIN,dest));
        E.registerFirewallRule({ name, file : dest, binary : true });
    })

    E.copy(path.join(dest,'kasparov','database','migrations'),path.join(E.BIN,'database','migrations'));
})

0 && E.task('mysql', ['origin'], async (callback) => {

    // disabling MySQL for now
    // return Promise.resolve();

    // ---

    if(E.PLATFORM == 'linux')
        return Promise.resolve();

    if(E.flags.nodb || E.flags.nosql || E.flags.nomysql)
        return Promise.resolve();

    let version = '8.0.18';
    let macos = 'macos10.14';
    const mysql = {
        windows : `mysql-${version}-winx64.zip`,
        linux : `mysql-${version}-linux-x86_64-minimal.tar.xz`,
        darwin : `mysql-${version}-${macos}-x86_64.tar.gz`
    }[E.PLATFORM];


    E.utils.resetTTY();

    let file = path.join(E.DEPS,mysql);
    await E.download(`https://dev.mysql.com/get/Downloads/MySQL-8.0/${mysql}`,file);
    await E.unzip(file, E.DEPS);//, callback);
    let basename = path.basename(mysql).replace(/\.(zip|tar|tar.gz|tar.xz)$/,'');

    const targetBinFolder = path.join(E.BIN,basename);
    if(fs.existsSync(targetBinFolder)) {
        E.log(`WARNING: previous MySQL deployment found...`.brightRed,);
        E.log(`         cleaning up existing ${targetBinFolder}...`);
        await fs.remove(targetBinFolder);
    }
    mkdirp.sync(targetBinFolder);

    E.log(`copying ${basename}...`);
    let folders = ['bin','lib','share'];

    let jobs = folders.map((f) => {
        if(E.PLATFORM == 'windows')
            return E.copy(path.join(E.DEPS,basename,f), path.join(targetBinFolder,f));
        else
            return E.spawn('cp', ['-R',path.join(E.DEPS,basename,f),path.join(targetBinFolder,f)], { cwd : E.DEPS, stdio: 'inherit' });
    })
    await Promise.all(jobs);
    E.log('done...');

})

E.task('pgsql', ['origin'], async (callback) => {
    console.log("PGSQL",E.BIN)
    if(E.PLATFORM == 'linux')
        return Promise.resolve();

    if(E.flags.nodb || E.flags.nosql || E.flags.nopgsql)
        return Promise.resolve();

    const pgsql = {
        windows : { 
            url : 'http://sbp.enterprisedb.com/getfile.jsp?fileid=12454', 
            file : `postgresql-12.2-2-windows-x64-binaries.zip` 
        },
        darwin : { 
            url : 'https://sbp.enterprisedb.com/getfile.jsp?fileid=12475', 
            file : `postgresql-12.2-3-osx-binaries.zip` 
        }
    }[E.PLATFORM];
    // `postgresql-12.2-3-osx-binaries.zip`.match(/^\w+-(\d).(\d)-(\d)/)
    const [, major, minor, release_] = pgsql.file.match(/^\w+-(\d+).(\d+)-(\d+)/);
    const version = `${major}.${minor}.${release_}`;

    E.utils.resetTTY();

    const file = path.join(E.DEPS,pgsql.file);
    const basename = path.basename(pgsql.file).replace(/\.(zip|tar|tar.gz|tar.xz)$/,'');
    const archiveFolder = path.join(E.DEPS, basename);
    if(!fs.existsSync(file) || !fs.existsSync(path.join(archiveFolder,'pgsql'))) {
        await E.download(pgsql.url,file);
        await E.unzip(file, archiveFolder);
    }

    const targetBinFolder = path.join(E.BIN,basename);
    if(fs.existsSync(targetBinFolder)) {
        E.log(`WARNING: previous pgSQL deployment found...`.brightRed,);
        E.log(`         cleaning up existing ${targetBinFolder}...`);
        await fs.remove(targetBinFolder);
    }
    mkdirp.sync(targetBinFolder);

    E.log(`copying ${basename}...`);
    let folders = ['bin','lib','share'];

    // --pgsql-full-distro adds 425 Mb to the final distribution :/
    if(E.flags['pgsql-full-distro'])
        folders.push('pgadmin 4', 'stackbuilder', 'symbols', 'include', 'doc');
    
    const jobs = folders.map((f) => {
        if(E.PLATFORM == 'windows') {
            return E.copy(path.join(archiveFolder,'pgsql',f), path.join(targetBinFolder,f));
        }
        else
            return E.spawn('cp', ['-R',path.join(archiveFolder,'pgsql',f),path.join(targetBinFolder,f)], { cwd : E.DEPS, stdio: 'inherit' });
    })
    await Promise.all(jobs);

    [ 'postgres', 'pg_ctl', 'psql', 'initdb' ].forEach((f) => {
        let name = `KDX pgSQL ${f}`;
        let file = path.join(basename, 'bin', f+E.PLATFORM_BINARY_EXTENSION);
        E.registerFirewallRule({ name, file, binary : true });
    })

    E.log('done...');
})

E.task('remote', ['origin'], async (callback) => {
    let files = (E.manifest.files||[]).map(f=>{
        return E.copy(path.join(E.REPO,f), path.join(E.BUILD, f));
    })
    E.log(`copying ${files.length} items...`);
    await Promise.all(files);
    // console.log(`done...`);
})

E.task('mqtt',['origin'], async () => {
    if(E.PLATFORM == 'windows') {
        E.registerFirewallRule({ name : 'KDX MQTT', file : 'mosquitto/mosquitto.exe', binary : true });
        return E.copy(path.join(E.REPO,'resources','deps','mosquitto-windows-x64'),path.join(E.BIN,'mosquitto'));
    }
})

E.task('done', ['pgsql','kaspad','remote','mqtt'], async () => {

})


E.task('aptitude', null, async (callback) => {

    if(E.PLATFORM != 'linux')
        return;

// TODO - APT-PACKAGE REQUIREMENTS
// net-tools
// wondershaper

})

E.task('docker',null, async () => {
    if(E.PLATFORM != 'linux')
        return;

    E.manifest_read();


    const rsafile = path.join(os.homedir(),'.ssh','id_rsa');
    if(!fs.existsSync(rsafile)) {
        E.log("ERROR - unable to locate".red.bold,rsafile.bold);
        process.exit(1);
    } else {
        const rsa = fs.readFileSync(rsafile);//,'utf8');
        const relay = ['no-cache'];
        const args = ['-s','docker','build'].concat(relay.map(k=>E.flags[k]?`--${k}`:null)).filter(v=>v);
        args.push('--build-arg',`SSH_PRIVATE_KEY=${rsa.toString('hex')}`);
        args.push('-t',`khost:latest`,'.');
        const ts0 = Date.now();
        await E.utils.spawn('sudo', args, { cwd : __dirname, stdio: 'inherit' });
        await E.utils.spawn('sudo',['docker','tag','khost:latest',`khost:${E.manifest.version}`], { cwd : __dirname, stdio: 'inherit' });
        console.log('Docker build complete at',new Date());
        const ts1 = Date.now();
        console.log('Docker build took'.brightBlue,`${((ts1-ts0)/1000/60).toFixed(1)}`.brightWhite,'minutes'.brightBlue)
    }
})    


if(E.flags.docker) {
    E.run(['docker']);
}
else if(E.flags['pgsql']) 
    E.run(['pgsql']);
else if(E.flags['local-binaries']) {

    E.BIN = path.join(E.appFolder,'bin',E.PLATFORM_ARCH);
    mkdirp.sync(E.BIN);
    

    E.run(['kaspad','pgsql','aptitude']);
}
else
    E.run();
