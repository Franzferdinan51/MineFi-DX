"use strict";

const KASPA_DEFAULT_BRANCH = 'v0.11.6-dev'; //'master';
//const KASPA_DEFAULT_BRANCH = 'master';

const E = new Emanator(__dirname, {
    type : argv.includes('build') || flags.innosetup ? 'NODE+NWJS' : 'UTIL',
    guid : 'c1072045-6d98-44d8-9aa5-e9be6c79bd01',
    group : 'Kaspa',
    ident : 'kdx',
    suffix : flags.full ? '-dev' : '',
    title : 'KDX',
    banner : 'KDX',
    git : 'git@github.com:aspectron/kdx',
    author : "ASPECTRON Inc.",
    url : "http://aspectron.com",
    //archive : true,
    folder : true,
    standalone : true,
    production: true,
    //DMG: true,
    nwjs : { version : '0.55.0' },
    resources : 'resources/setup',

    manifest : (manifest) => {
        if(E.flags['with-perfmon'] && !E.flags['no-perfmon']) {
            if(E.PLATFORM != 'darwin') {
                Object.assign(manifest.dependencies,{
                    "@aspectron/process-list": "*",
                })
            }
        }

//        if(E.PLATFORM == 'darwin')
//            manifest.files.push('apps');

        return manifest;
    },
})

E.flags['with-perfmon'] = true;

E.aux_dmg_files = async (root) => {
    if(fs.existsSync(path.join(E.BUILD,'apps')))
        await E.copy(path.join(E.BUILD,'apps'),path.join(root,'apps'));

    //    E.copy(process.argv[0], root);
}



const go = await E.modules.go('go1.16.0');
const git = await E.modules.git();
const gcc = await E.modules.gcc();
const npm = await E.modules.npm({ production : true });

if(E.flags.full || E.flags.all) {
    E.flags['with-dagviz'] = true;
    E.flags['with-kmetrics'] = true;
    E.flags['with-perfmon'] = true;
    E.flags['with-extras'] = true;
}

E.flags['with-dagviz'] && E.task('dagviz', ['remote'], async () => {
    const dest = path.join(E.BUILD,'apps');
    mkdirp.sync(dest);

    const dagvizFolder = path.join(dest,'dagviz');
    await E.remove(dagvizFolder);
    await git.clone('git@github.com:kaspanet/dagviz', dest, { branch : E.flags['dagviz-branch'] || 'master' });
    await E.remove(path.join(dagvizFolder,'.git'));
    await npm.install({ cwd : dagvizFolder});
    //await E.spawn('emanate', ['--local-binaries'], { cwd : dagvizFolder, stdio: 'inherit' });

    execSync('emanate --local-binaries', { cwd : dagvizFolder, stdio : 'inherit' });
    await E.copy(process.argv[0],path.join(dagvizFolder,path.basename(process.argv[0])));
    //await E.spawn('emanate', ['--local-binaries'], { cwd : dagvizFolder, stdio: 'inherit' });

    // sine dagviz carries a lot of modules already included with kdx
    // scan for duplicates and remove them from dagviz as require() will
    // scan parent folders (kdx) for node_module
    // --- this doesn't work properly - breaks dependency resolution in the deployment
    // let dagvizModules = fs.readdirSync(path.join(dagvizFolder,'node_modules'));
    // let kdxModules = fs.readdirSync(path.join(E.BUILD,'node_modules'));
    // let duplicates = dagvizModules.filter(f => kdxModules.includes(f) && !/^\.\.?$/.test(f));
    // let jobs = duplicates.map(f => E.remove(path.join(dagvizFolder,'node_modules',f)));
    // await Promise.all(jobs);
});

/*
E.flags['with-ksandbox'] && E.task('ksandbox', ['remote'], async () => {
    const dest = path.join(E.BUILD,'apps')
    mkdirp.sync(dest);
    const ksandboxFolder = path.join(dest,'ksandbox');
    return Promise.resolve();
});
*/

E.flags['with-kmetrics'] && E.task('kmetrics', ['remote'], async () => {
    const dest = path.join(E.BUILD,'apps')
    mkdirp.sync(dest);
    const kmetricsFolder = path.join(dest,'kmetrics');
    await E.remove(kmetricsFolder);
    await git.clone('git@github.com:aspectron/kmetrics', dest, { branch : E.flags['kmetrics-branch'] || 'master' });
    await E.remove(path.join(kmetricsFolder,'.git'));

    return Promise.resolve();
});

const kaspad = E.task('kaspad', ['origin'], async () => {

    //return true;
    if(E.PLATFORM == 'windows') {
        process.env.PATH = ['C:\\TDM-GCC-64\\bin', ...process.env.PATH.split(';')].join(';');
    }

    let dest = path.join(go.SRC,'github.com/kaspanet/');
    if((E.flags.reset || E.flags.clean) && fs.existsSync(dest))
        await E.emptyDir(dest);

    const branch = E.flags['branch'] || KASPA_DEFAULT_BRANCH || 'master';
    
    console.log('branch:',branch);
    
    //const repos = { };
    const repos = [`kaspad:${branch}`];
    if(E.flags['with-extras']) {
        repos.push(`txgen:${branch}`,`kasparov:${KASPA_DEFAULT_BRANCH}`);
    }
    else if(E.flags['with-kmetrics'] || E.flags['with-txgen']) {
        repos.push(`txgen:${branch}`);
    }

    console.log("REPOS:".brightMagenta,repos);

    for(const repo of repos) {
        let [name, git_branch] = repo.split(':');
        console.log(`git clone https://github.com/kaspanet/${name} branch: ${git_branch || 'master'}`.brightYellow);
        await git.clone(`https://github.com/kaspanet/${name}`,dest, {branch : git_branch || 'master'});
    }

    let targets = [
        'kaspad',
        ...fs.readdirSync(path.join(dest,'kaspad/cmd')).map(f => `kaspad/cmd/${f}`),
    ];

    if(E.flags['with-extras'] || E.flags['with-txgen']) {
        targets = [
            ...targets,
            // 'miningsimulator',
            'txgen',
        ];
    }

    let rename = {}
    console.log('Starting target processing...')
    let folders = []

    for(let target of targets) {
        let folder = path.join(dest,target);
        console.log('builing',folder);
        await go.build(folder);
        console.log('done',folder);
        folders.push(folder);
    }

    folders.forEach((folder) => {
        let file = path.basename(folder);
        let name = `${E.title} ${file}`;
        let dest = rename[file] || file;
        file += E.PLATFORM_BINARY_EXTENSION;
        dest += E.PLATFORM_BINARY_EXTENSION;

        if(!fs.existsSync(path.join(folder,file))) {
            console.log(`Unable to locate source file: ${path.join(folder,file)}`);
            console.log(`...giving up`);
            process.exit(1);
        }
        console.log("E.copy:", path.join(folder,file)," -> ",path.join(E.BIN,dest))
        E.copy(path.join(folder,file),path.join(E.BIN,dest));
        E.registerFirewallRule({ name, file : dest, binary : true });
    })

    //E.copy(path.join(dest,'kasparov','database','migrations'),path.join(E.BIN,'database','migrations'));
});

E.task('remote', ['origin'], async () => {

    let files = (E.manifest.files||[]).map(f=>{
        // console.log(E.REPO,'->',E.BUILD, f);
        return E.copy(path.join(E.REPO,f), path.join(E.BUILD, f));
    })
    E.log(`copying ${files.length} items...`);
    await Promise.all(files);

    fs.writeFileSync(path.join(E.BUILD,'i18n.lock'),'');
    console.log(`i18n.lock`);
})

const aux_deps = E.flags.auxiliary ? ['kaspad','remote'] : ['kaspad']
E.task('done', aux_deps, async () => {
})

E.task('aptitude', null, async () => {
    if(E.PLATFORM != 'linux')
        return;
})

E.flags.docker && E.task('docker', null, async () => {

    E.manifest_read();

    const relay = ['no-cache'];
    const args = ['-s','docker','build'].concat(relay.map(k=>E.flags[k]?`--${k}`:null)).filter(v=>v);
    args.push('-t',`kdx:latest`,'.');
    const ts0 = Date.now();
    await E.utils.spawn('sudo', args, { cwd : __dirname, stdio: 'inherit' });
    await E.utils.spawn('sudo',['docker','tag','kdx:latest',`kdx:${E.manifest.version}`], { cwd : __dirname, stdio: 'inherit' });
    console.log('Docker build complete at',new Date());
    const ts1 = Date.now();
    console.log('Docker build took'.brightBlue,`${((ts1-ts0)/1000/60).toFixed(1)}`.brightWhite,'minutes'.brightBlue)
});


if(E.flags['local-binaries'] || E.flags['kaspa']) {
    E.BIN = path.join(E.appFolder,'bin', E.PLATFORM_ARCH);
    mkdirp.sync(E.BIN);
}


if(E.flags.link) {
    let list = ['flow-ux','flow-app','flow-utils','flow-rpc','flow-async'];
    while(list.length) {
        let ident = list.shift();
        await npm.link(`@aspectron/${ident}`, { cwd : __dirname, stdio : 'inherit' });
    }
}
else 
if(E.flags.docker) {
    E.runTask('docker');
}
else if(E.flags['kaspa']) 
    await kaspad();
else if(E.flags['local-binaries']) {
    E.runTask('kaspad');
    E.runTask('aptitude');
}
else
    E.run();
